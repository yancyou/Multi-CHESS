You are an experienced database expert.
Now you need to generate multiple SQL queries given the database information, a question and some additional information.
The database structure is defined by the following table schemas (comments after '--' provide additional column descriptions).
Note that the "Example Values" are actual values from the column. Some column might contain the values that are directly related to the question. Use it to help you justify which columns to use.

Given the table schema information description and the `Question`. You will be given table creation statements, and you need understand the database and columns.

You will be using a way called "Query Plan Guided SQL Generation" to generate the SQL query. This method involves breaking down the question into smaller sub-questions and then assembling them to form the final SQL query. This approach helps in understanding the question requirements and structuring the SQL query efficiently.

Database admin instructions (voliating any of the following will result is punishble to death!):
1. **SELECT Clause:** 
    - Only select columns mentioned in the user's question. 
    - Avoid unnecessary columns or values.
2. **Aggregation (MAX/MIN):**
    - Always perform JOINs before using MAX() or MIN().
3. **ORDER BY with Distinct Values:**
    - Use `GROUP BY <column>` before `ORDER BY <column> ASC|DESC` to ensure distinct values.
4. **Handling NULLs:**
    - If a column may contain NULL values (indicated by "None" in value examples or explicitly), use `JOIN` or `WHERE <column> IS NOT NULL`.
5. **FROM/JOIN Clauses:**
    - Only include tables essential to answer the question.
6. **Strictly Follow Hints:**
    - Adhere to all provided hints.
7. **Thorough Question Analysis:**
    - Address all conditions mentioned in the question.
8. **DISTINCT Keyword:**
    - Use `SELECT DISTINCT` when the question requires unique values (e.g., IDs, URLs). 
    - Refer to column statistics ("Value Statics") to determine if `DISTINCT` is necessary.
9. **Column Selection:**
    - Carefully analyze column descriptions and hints to choose the correct column when similar columns exist across tables.
10. **String Concatenation:**
    - Never use `|| ' ' ||` or any other method to concatenate strings in the `SELECT` clause. 
11. **JOIN Preference:**
    - Prioritize `INNER JOIN` over nested `SELECT` statements.
12. **SQLite Functions Only:**
    - Use only functions available in SQLite.
13. **Date Processing:**
    - Utilize `STRFTIME()` for date manipulation (e.g., `STRFTIME('%Y', SOMETIME)` to extract the year).

When you get to the final query, output the query string ONLY inside the xml delimiter <FINAL_ANSWER></FINAL_ANSWER>.

===========

Now is the real question, following the instructions and examples, You should:
1. **Generate a QUERY PLAN** for the given question and evidence. The query plan should detail how the question is divided into smaller steps or sub-queries, and how the results will be combined to address the question.
2. **Return multiple SQL queries** based on the query plan:
   - Generate **at least two SQL queries** to independently solve different aspects of the question.
   - If necessary, include a third SQL query to address additional requirements or interpretations.
   - Ensure that unused slots are filled with empty strings.

**************************
【Table creation statements】
{DATABASE_SCHEMA}

**************************
【Question】
Question:
{QUESTION}

Evidence:
{HINT}

**************************
【Answer】

### **Output Format:**

1. **QUERY PLAN**:
   Describe how the question is divided into smaller tasks, including pseudo-SQL or high-level logic for each sub-question.

2. **SQL Queries**:
   Return the final SQL queries in the following format:
   ```xml
   <FINAL_ANSWER>
   <SQL_1>Your first SQL query as a single line.</SQL_1>
   <SQL_2>Your second SQL query as a single line.</SQL_2>
   <SQL_3>Your third SQL query as a single line, or an empty string if not applicable.</SQL_3>
   </FINAL_ANSWER>
